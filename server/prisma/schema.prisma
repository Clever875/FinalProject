generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  name          String?
  passwordHash  String?
  role          String?
  avatar        String?
  language      String?
  theme         String?
  isBlocked     Boolean?     @default(false)
  lastActive    DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  comments      Comment[]
  forms         Form[]
  likes         Like[]
  templates     Template[]   @relation("CreatedBy")
  templateAccess Template[]  @relation("Access")

  @@index([email], map: "email_UNIQUE")
}

model Template {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  topic        String?
  theme        String?       // <-- добавляем это поле
  imageUrl     String?
  isPublic     Boolean?      @default(true)
  ownerId      Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  createdBy    User?         @relation("CreatedBy", fields: [ownerId], references: [id])
  allowedUsers User[]        @relation("Access")
  comments     Comment[]
  forms        Form[]
  likes        Like[]
  questions    Question[]
  templateTags TemplateTag[]

  @@index([ownerId], map: "Template_ownerId_fkey")
}


model Comment {
  id         Int      @id @default(autoincrement())
  templateId Int
  authorId   Int
  text       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  template   Template @relation(fields: [templateId], references: [id])
  author     User     @relation(fields: [authorId], references: [id])

  @@index([templateId])
  @@index([authorId])
}

model Form {
  id         Int      @id @default(autoincrement())
  templateId Int
  authorId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  completed  Boolean? @default(false)

  template   Template @relation(fields: [templateId], references: [id])
  author     User     @relation(fields: [authorId], references: [id])
  answers    Answer[]

  @@index([templateId])
  @@index([authorId])
}

model Like {
  id         Int      @id @default(autoincrement())
  templateId Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  template   Template @relation(fields: [templateId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([templateId])
  @@index([userId])
}

model Question {
  id                 Int       @id @default(autoincrement())
  templateId         Int
  type               String?
  title              String?
  description        String?
  isVisibleInResults Boolean? @default(true)
  order              Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  template           Template @relation(fields: [templateId], references: [id])
  answers            Answer[]
  options            Option[]

  @@index([templateId])
}

model Answer {
  id         Int      @id @default(autoincrement())
  formId     Int
  questionId Int
  value      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  form       Form     @relation(fields: [formId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@index([formId])
  @@index([questionId])
}

model Option {
  id         Int      @id @default(autoincrement())
  value      String
  questionId Int

  question   Question @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  templateTags TemplateTag[]
}

model TemplateTag {
  id         Int      @id @default(autoincrement())
  templateId Int
  tagId      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  template   Template @relation(fields: [templateId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@index([templateId])
  @@index([tagId])
}

model Sequelizemeta {
  name String @id
}
