generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String?
  templates  Template[]
  forms      Form[]
  comments   Comment[]
  likes      Like[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Template {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  topic       String
  imageUrl    String?
  public      Boolean   @default(false)
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  tags        Tag[]     @relation("TemplateTags")
  questions   Question[]
  forms       Form[]
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  templates Template[] @relation("TemplateTags")
}

model Question {
  id          Int       @id @default(autoincrement())
  templateId  Int
  template    Template  @relation(fields: [templateId], references: [id])
  title       String
  description String?
  type        String    // e.g. "string_single", "text_multi", "integer", "checkbox"
  required    Boolean   @default(false)
  showInTable Boolean   @default(false)
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  answers     Answer[]
}

model Form {
  id         Int       @id @default(autoincrement())
  templateId Int
  template   Template  @relation(fields: [templateId], references: [id])
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  answers    Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  formId     Int
  form       Form     @relation(fields: [formId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id         Int      @id @default(autoincrement())
  text       String
  authorId   Int
  author     User     @relation(fields: [authorId], references: [id])
  templateId Int
  template   Template @relation(fields: [templateId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  templateId Int
  template   Template @relation(fields: [templateId], references: [id])
  createdAt  DateTime @default(now())
}
