generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  passwordHash   String
  name           String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  comments       Comment[]
  forms          Form[]
  likes          Like[]
  templates      Template[] @relation("TemplateCreatedBy")
  templateAccess Template[] @relation("TemplateAccess")
}

model Template {
  id           String        @id @default(cuid())
  title        String
  description  String
  imageUrl     String?
  isPublic     Boolean       @default(true)
  theme        String?
  createdById  Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  comments     Comment[]
  forms        Form[]
  likes        Like[]
  questions    Question[]
  createdBy    User          @relation("TemplateCreatedBy", fields: [createdById], references: [id])
  templateTags TemplateTag[]
  allowedUsers User[]        @relation("TemplateAccess")

  @@index([createdById], map: "Template_createdById_fkey")
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  templateTags TemplateTag[]
}

model TemplateTag {
  id         Int      @id @default(autoincrement())
  templateId String
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  template   Template @relation(fields: [templateId], references: [id])

  @@index([tagId], map: "TemplateTag_tagId_fkey")
  @@index([templateId], map: "TemplateTag_templateId_fkey")
}

model Question {
  id             String   @id @default(cuid())
  text           String
  type           String
  order          Int
  displayInTable Boolean  @default(false)
  isRequired     Boolean  @default(true)
  templateId     String
  answers        Answer[]
  options        Option[]
  template       Template @relation(fields: [templateId], references: [id])

  @@index([templateId], map: "Question_templateId_fkey")
}

model Option {
  id         Int      @id @default(autoincrement())
  value      String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "Option_questionId_fkey")
}

model Form {
  id         Int      @id @default(autoincrement())
  templateId String
  authorId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  answers    Answer[]
  author     User     @relation(fields: [authorId], references: [id])
  template   Template @relation(fields: [templateId], references: [id])

  @@index([authorId], map: "Form_authorId_fkey")
  @@index([templateId], map: "Form_templateId_fkey")
}

model Answer {
  id         Int      @id @default(autoincrement())
  formId     Int
  questionId String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  form       Form     @relation(fields: [formId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@index([formId], map: "Answer_formId_fkey")
  @@index([questionId], map: "Answer_questionId_fkey")
}

model Comment {
  id         Int      @id @default(autoincrement())
  text       String
  authorId   Int
  templateId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  template   Template @relation(fields: [templateId], references: [id])

  @@index([authorId], map: "Comment_authorId_fkey")
  @@index([templateId], map: "Comment_templateId_fkey")
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     Int
  templateId String
  createdAt  DateTime @default(now())
  template   Template @relation(fields: [templateId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([templateId], map: "Like_templateId_fkey")
  @@index([userId], map: "Like_userId_fkey")
}
